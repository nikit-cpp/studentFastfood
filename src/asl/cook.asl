//База начальных убеждений
timeOfProduce(3000). // Время производства одной порции.
!produceMeals. // Цель – производство еды.
//2. Планы по достижению целей (табл.

@cc1
+!produceMeals <-
	?timeOfProduce(TOP);
	.wait(TOP);
	.send(store, achieve, takeNewMeal);
	.send(store, askOne, mealsInStore(Rest), mealsInStore(Rest));
	!setProduceSpeed(Rest);
	!!produceMeals.
/*Рекурсивный план, моделирующий производство одной порции еды за условное время.
Произведенная порция отправляется на склад. Тут же отслеживается текущее количество
еды на складе и вызывается подзадача корректировки скорости производства (строки 11, 12).
Выполнение операции в строке 5 приостанавливает обработку плана до получения ответа от
хранилища. В строке 13 выполняется рекурсивный вызов с выделением нового стека намерений.
*/

@cc2
+!setProduceSpeed(Rest): Rest >5 <-
	-+timeOfProduce(3000).
/*План выбирает одно из возможных значений скорости производства еды. Если количество
порций на складе больше 5, то устанавливается нормальная скорость производства.
*/

@cc3
+!setProduceSpeed(Rest): Rest<=5 <-
	-+timeOfProduce(300).
/*План выбирает одно из возможных значений скорости производства еды. Если количество
порций на складе от 5 и меньше, то устанавливается высокая скорость производства.
Условно считается, что порция готовится за 300 мс модельного времени.
*/

@cc4
+!who_is_last<- true.
/*План «заглушка», обеспечивающий нейтральную реакцию повара при получении цели «who_is_last»,
поступающей всем агентам при создании очередного клиента.
*/